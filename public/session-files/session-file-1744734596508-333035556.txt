patient-session.ejs
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>جلسة مع د. <%= session.doctor.username %></title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .video-container { position: relative; }
    .video-placeholder { 
      position: absolute; 
      top: 0; 
      left: 0; 
      width: 100%; 
      height: 100%; 
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background-color: rgba(0, 0, 0, 0.7);
      z-index: 10;
      transition: opacity 0.3s;
    }
    .video-placeholder.hidden {
      opacity: 0;
      pointer-events: none;
    }
    .message {
      max-width: 70%;
      padding: 12px;
      border-radius: 20px;
      margin: 8px 0;
      transition: all 0.3s;
    }
    .message.sent {
      background: #007bff;
      color: white;
      margin-left: auto;
      border-bottom-right-radius: 2px;
    }
    .message.received {
      background: #e9ecef;
      color: #333;
      margin-right: auto;
      border-bottom-left-radius: 2px;
    }
    .message-time {
      font-size: 0.75rem;
      color: #666;
      margin-top: 4px;
    }
    .connection-status {
      position: absolute;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 14px;
      z-index: 20;
    }
    .spinner {
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    .error-toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #ef4444;
      color: white;
      padding: 12px 24px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transform: translateY(100px);
      opacity: 0;
      transition: all 0.3s ease;
      z-index: 1000;
    }
    .error-toast.show {
      transform: translateY(0);
      opacity: 1;
    }
    .file-message {
      max-width: 70%;
      padding: 12px;
      border-radius: 12px;
      margin: 8px 0;
      background: #f0f9ff;
      border: 1px solid #e0e0e0;
    }
    .file-message.sent {
      margin-left: auto;
      background: #007bff10;
      border: 1px solid #007bff30;
    }
    .file-message.received {
      margin-right: auto;
    }
    .file-icon {
      font-size: 2rem;
      color: #007bff;
      margin-bottom: 8px;
    }
    .file-name {
      font-weight: 500;
      margin-bottom: 4px;
      word-break: break-all;
    }
    .file-size {
      font-size: 0.75rem;
      color: #666;
    }
    .file-download {
      display: inline-block;
      margin-top: 8px;
      padding: 4px 12px;
      background: #007bff;
      color: white;
      border-radius: 20px;
      font-size: 0.8rem;
      text-decoration: none;
    }
    .file-preview {
      max-width: 100%;
      max-height: 200px;
      border-radius: 8px;
      margin-top: 8px;
    }
    .chat-actions {
      display: flex;
      gap: 8px;
      margin-left: 8px;
    }
    .file-upload-btn {
      background: #007bff;
      color: white;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      border: none;
    }
    .upload-progress {
      width: 100%;
      height: 4px;
      background: #e0e0e0;
      border-radius: 2px;
      margin-top: 8px;
      overflow: hidden;
    }
    .upload-progress-bar {
      height: 100%;
      background: #007bff;
      width: 0%;
      transition: width 0.3s;
    }
  </style>
</head>
<body class="bg-gray-100 font-sans">
  <div class="flex flex-col h-screen">
    <div class="bg-blue-600 text-white p-4 text-center">
      <h2 class="text-xl font-bold">جلسة مع د. <%= session.doctor.username %></h2>
    </div>
    <div class="flex flex-1 overflow-hidden">
      <div class="flex-2 bg-gray-900 video-container">
        <div id="remoteVideoPlaceholder" class="video-placeholder text-white">
          <div class="text-center">
            <i class="fas fa-user-doctor text-6xl mb-4"></i>
            <p class="text-xl mb-2">في انتظار اتصال الدكتور...</p>
            <div class="flex items-center justify-center">
              <div class="spinner mr-2"><i class="fas fa-circle-notch text-2xl"></i></div>
              <span>جاري الاتصال...</span>
            </div>
          </div>
        </div>
        <video id="remoteVideo" autoplay playsinline class="w-full h-full object-cover"></video>
        <video id="localVideo" autoplay muted playsinline class="absolute bottom-4 right-4 w-48 h-36 border-2 border-white rounded-lg"></video>
        <div id="connectionStatus" class="connection-status hidden">
          <i class="fas fa-circle text-xs mr-1"></i>
          <span>جاري الاتصال...</span>
        </div>
      </div>
      <div class="flex-1 flex flex-col bg-white border-l">
        <div class="p-4 border-b font-bold text-gray-800">المحادثة</div>
        <div id="messagesContainer" class="flex-1 overflow-y-auto p-4 space-y-4"></div>
        <div class="p-4 border-t flex items-center">
          <div class="chat-actions">
            <button id="fileUploadBtn" class="file-upload-btn" title="إرسال ملف">
              <i class="fas fa-paperclip"></i>
            </button>
            <input id="fileInput" type="file" class="hidden" multiple>
          </div>
          <input id="messageInput" type="text" class="flex-1 p-2 border rounded-full outline-none" placeholder="اكتب رسالتك...">
          <button id="sendMessageBtn" class="bg-blue-600 text-white p-2 ml-2 rounded-full w-10 h-10 flex items-center justify-center">
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
      </div>
    </div>
  </div>

  <div id="errorToast" class="error-toast hidden">
    <div class="flex items-center">
      <i class="fas fa-exclamation-circle mr-2"></i>
      <span id="errorMessage"></span>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      try {
        const socket = io();
        const sessionId = "<%= session._id %>";
        const userType = "patient";
        let connectionTimeout;
        let peerConnection;
        let localStream;

        // إنشاء عناصر DOM للرسائل
        const createMessageElement = (messageData) => {
          const messageDiv = document.createElement('div');
          messageDiv.className = `message p-3 rounded-lg ${messageData.sender === userType ? 'sent' : 'received'}`;
          
          const textDiv = document.createElement('div');
          textDiv.className = 'message-text';
          textDiv.textContent = messageData.text;
          
          const timeDiv = document.createElement('div');
          timeDiv.className = 'message-time';
          timeDiv.textContent = messageData.time;
          
          messageDiv.appendChild(textDiv);
          messageDiv.appendChild(timeDiv);
          
          return messageDiv;
        };

        // إنشاء عناصر DOM لملفات الرسائل
        const createFileMessageElement = (fileData) => {
          const fileDiv = document.createElement('div');
          fileDiv.className = `file-message p-3 ${fileData.sender === userType ? 'sent' : 'received'}`;
          
          const fileContent = document.createElement('div');
          
          // تحديد أيقونة حسب نوع الملف
          const fileType = fileData.fileType || 'application/octet-stream';
          let iconClass = 'fa-file';
          
          if (fileType.startsWith('image/')) iconClass = 'fa-file-image';
          else if (fileType.includes('pdf')) iconClass = 'fa-file-pdf';
          else if (fileType.includes('word')) iconClass = 'fa-file-word';
          else if (fileType.includes('excel')) iconClass = 'fa-file-excel';
          else if (fileType.includes('video')) iconClass = 'fa-file-video';
          else if (fileType.includes('audio')) iconClass = 'fa-file-audio';
          else if (fileType.includes('zip')) iconClass = 'fa-file-archive';
          
          fileContent.innerHTML = `
            <div class="file-icon">
              <i class="fas ${iconClass}"></i>
            </div>
            <div class="file-name">${fileData.fileName}</div>
            <div class="file-size">${formatFileSize(fileData.fileSize)}</div>
            <a href="${fileData.fileUrl}" target="_blank" class="file-download">
              <i class="fas fa-download mr-1"></i> تحميل
            </a>
          `;
          
          // إذا كان الملف صورة، أضف معاينة
          if (fileType.startsWith('image/')) {
            const imgPreview = document.createElement('img');
            imgPreview.src = fileData.fileUrl;
            imgPreview.className = 'file-preview mt-2';
            imgPreview.alt = 'معاينة الصورة';
            fileContent.appendChild(imgPreview);
          }
          
          // إذا كانت حالة التحميل، أضف شريط التقدم
          if (fileData.uploading) {
            const progressDiv = document.createElement('div');
            progressDiv.className = 'upload-progress mt-2';
            progressDiv.innerHTML = '<div class="upload-progress-bar"></div>';
            fileContent.appendChild(progressDiv);
          }
          
          fileDiv.appendChild(fileContent);
          return fileDiv;
        };

        // تنسيق حجم الملف
        const formatFileSize = (bytes) => {
          if (bytes === 0) return '0 بايت';
          const k = 1024;
          const sizes = ['بايت', 'كيلوبايت', 'ميجابايت', 'جيجابايت'];
          const i = Math.floor(Math.log(bytes) / Math.log(k));
          return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        };

        // عرض رسائل الخطأ
        const showErrorToast = (message, duration = 5000) => {
          const errorToast = document.getElementById('errorToast');
          const errorMessage = document.getElementById('errorMessage');
          
          errorMessage.textContent = message;
          errorToast.classList.remove('hidden');
          errorToast.classList.add('show');
          
          setTimeout(() => {
            errorToast.classList.remove('show');
            setTimeout(() => errorToast.classList.add('hidden'), 300);
          }, duration);
        };

        // تحديث حالة الاتصال
        const updateConnectionStatus = (status, isError = false) => {
          const statusElement = document.getElementById("connectionStatus");
          if (!statusElement) return;
          
          statusElement.innerHTML = `
            <i class="fas fa-circle text-xs mr-1 ${isError ? 'text-red-500' : 'text-yellow-500'}"></i>
            <span>${status}</span>
          `;
          
          statusElement.classList.remove("hidden");
          if (isError) {
            statusElement.classList.add("bg-red-500");
            statusElement.classList.remove("bg-black");
          } else {
            statusElement.classList.add("bg-black");
            statusElement.classList.remove("bg-red-500");
          }
        };

        // تنظيف الموارد
        const cleanupResources = () => {
          if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
          }
          if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
          }
          clearTimeout(connectionTimeout);
        };

        // رفع الملفات إلى السيرفر
        const uploadFile = (file) => {
  return new Promise((resolve, reject) => {
    const formData = new FormData();
    formData.append('sessionFile', file);
    formData.append('sessionId', sessionId);
    formData.append('senderType', userType);
    
    
    // إضافة CSRF token من الكوكيز
    const csrfToken = document.cookie.split('; ').find(row => row.startsWith('XSRF-TOKEN='))?.split('=')[1];
    if (csrfToken) {
      formData.append('_csrf', csrfToken);
    }

    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/api/sessions/upload-file', true);

            // إنشاء رسالة تحميل مؤقتة
            const tempMessage = {
              sender: userType,
              fileName: file.name,
              fileSize: file.size,
              fileType: file.type,
              fileUrl: '#',
              uploading: true
            };
            
            const tempElement = createFileMessageElement(tempMessage);
            document.getElementById('messagesContainer').appendChild(tempElement);
            document.getElementById('messagesContainer').scrollTop = 
              document.getElementById('messagesContainer').scrollHeight;

            // تحديث شريط التقدم
            xhr.upload.onprogress = (event) => {
              if (event.lengthComputable) {
                const percentComplete = (event.loaded / event.total) * 100;
                const progressBar = tempElement.querySelector('.upload-progress-bar');
                if (progressBar) {
                  progressBar.style.width = percentComplete + '%';
                }
              }
            };

            xhr.onload = () => {
              if (xhr.status === 200) {
                const response = JSON.parse(xhr.responseText);
                resolve(response);
                
                // استبدال الرسالة المؤقتة بالرسالة النهائية
                tempElement.remove();
                const finalMessage = {
                  sender: userType,
                  fileName: response.fileData.fileName,
                  fileSize: response.fileData.fileSize,
                  fileType: response.fileData.fileType,
                  fileUrl: response.fileData.fileUrl,
                  time: new Date().toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' })
                };
                const finalElement = createFileMessageElement(finalMessage);
                document.getElementById('messagesContainer').appendChild(finalElement);
                document.getElementById('messagesContainer').scrollTop = 
                  document.getElementById('messagesContainer').scrollHeight;
              } else {
                reject(new Error('فشل في رفع الملف'));
                tempElement.remove();
                showErrorToast('فشل في رفع الملف');
              }
            };

            xhr.onerror = () => {
              reject(new Error('حدث خطأ في الاتصال'));
              tempElement.remove();
              showErrorToast('حدث خطأ أثناء رفع الملف');
            };

            xhr.send(formData);
          });
        };

        // تهيئة اتصال الفيديو
        const initMedia = async () => {
          try {
            updateConnectionStatus("جاري إعداد الاتصال...");
            
            const constraints = {
              video: true,
              audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true,
                channelCount: 1
              }
            };
            
            localStream = await navigator.mediaDevices.getUserMedia(constraints);
            document.getElementById("localVideo").srcObject = localStream;
            
            const configuration = { 
              iceServers: [
                { urls: "stun:stun.l.google.com:19302" },
                { urls: "stun:stun1.l.google.com:19302" },
                { urls: "stun:stun2.l.google.com:19302" }
              ] 
            };
            
            peerConnection = new RTCPeerConnection(configuration);
            
            localStream.getTracks().forEach(track => {
              peerConnection.addTrack(track, localStream);
            });

            connectionTimeout = setTimeout(() => {
              if (!peerConnection.remoteDescription) {
                showErrorToast("تعذر الاتصال بالدكتور. يرجى المحاولة مرة أخرى.");
                updateConnectionStatus("فشل الاتصال", true);
                cleanupResources();
              }
            }, 30000);

            peerConnection.ontrack = (event) => {
              clearTimeout(connectionTimeout);
              const remoteVideo = document.getElementById("remoteVideo");
              if (remoteVideo) {
                remoteVideo.srcObject = event.streams[0];
                remoteVideo.muted = false;
              }
              const placeholder = document.getElementById("remoteVideoPlaceholder");
              if (placeholder) placeholder.classList.add("hidden");
              updateConnectionStatus("متصل", false);
            };

            peerConnection.onicecandidate = (event) => {
              if (event.candidate) {
                socket.emit("iceCandidate", { sessionId, candidate: event.candidate });
              }
            };

            peerConnection.oniceconnectionstatechange = () => {
              if (peerConnection.iceConnectionState === "disconnected") {
                updateConnectionStatus("تم قطع الاتصال", true);
                showErrorToast("تم قطع الاتصال بالدكتور");
                cleanupResources();
              }
            };

            socket.on("answer", async (answer) => {
              try {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
              } catch (error) {
                console.error("Error handling answer:", error);
                showErrorToast("فشل في إعداد اتصال الفيديو");
                updateConnectionStatus("فشل في الاتصال", true);
                cleanupResources();
              }
            });

            socket.on("iceCandidate", async (candidate) => {
              try {
                if (peerConnection && candidate) {
                  await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                }
              } catch (error) {
                console.error("Error adding ICE candidate:", error);
              }
            });

            socket.on("newMessage", (message) => {
              const messagesContainer = document.getElementById("messagesContainer");
              if (messagesContainer) {
                const messageElement = createMessageElement(message);
                messagesContainer.appendChild(messageElement);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
              }
            });

            socket.on("newFileMessage", (fileData) => {
              const messagesContainer = document.getElementById("messagesContainer");
              if (messagesContainer) {
                const fileElement = createFileMessageElement(fileData);
                messagesContainer.appendChild(fileElement);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
              }
            });

            const offer = await peerConnection.createOffer({
              offerToReceiveAudio: true,
              offerToReceiveVideo: true
            });
            
            await peerConnection.setLocalDescription(offer);
            socket.emit("offer", { sessionId, offer });
            
            updateConnectionStatus("في انتظار رد الدكتور...");

          } catch (error) {
            console.error("Error initializing media:", error);
            showErrorToast("فشل في بدء الجلسة: " + error.message);
            updateConnectionStatus("فشل في الاتصال", true);
            cleanupResources();
          }
        };

        // تهيئة اتصال السوكيت
        socket.emit("joinSession", { sessionId, userType });

        // إعداد إرسال الرسائل النصية
        const sendMessageBtn = document.getElementById("sendMessageBtn");
        const messageInput = document.getElementById("messageInput");
        
        if (sendMessageBtn && messageInput) {
          sendMessageBtn.addEventListener("click", () => {
            const message = messageInput.value.trim();
            if (message) {
              const timestamp = new Date();
              socket.emit("sendMessage", { 
                sessionId, 
                message,
                timestamp
              });
              messageInput.value = "";
            }
          });
          
          messageInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
              sendMessageBtn.click();
            }
          });
        }

        // إعداد رفع الملفات
        const fileUploadBtn = document.getElementById("fileUploadBtn");
        const fileInput = document.getElementById("fileInput");
        
        if (fileUploadBtn && fileInput) {
          fileUploadBtn.addEventListener("click", () => {
            fileInput.click();
          });
          
          fileInput.addEventListener("change", async (e) => {
            const files = e.target.files;
            if (files && files.length > 0) {
              for (let i = 0; i < files.length; i++) {
                try {
                  await uploadFile(files[i]);
                } catch (error) {
                  console.error("Error uploading file:", error);
                  showErrorToast("حدث خطأ أثناء رفع الملف");
                }
              }
              fileInput.value = "";
            }
          });
        }

        // تحميل سجل المحادثة السابق
        const loadChatHistory = async () => {
          try {
            const response = await fetch(`/api/sessions/${sessionId}/messages`);
            if (response.ok) {
              const messages = await response.json();
              const container = document.getElementById('messagesContainer');
              
              messages.forEach(msg => {
                if (msg.type === 'text') {
                  container.appendChild(createMessageElement({
                    sender: msg.sender,
                    text: msg.message,
                    time: new Date(msg.timestamp).toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' })
                  }));
                } else if (msg.type === 'file') {
                  container.appendChild(createFileMessageElement({
                    sender: msg.sender,
                    fileName: msg.fileData.fileName,
                    fileSize: msg.fileData.fileSize,
                    fileType: msg.fileData.fileType,
                    fileUrl: msg.fileData.fileUrl,
                    time: new Date(msg.timestamp).toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' })
                  }));
                }
              });
              
              container.scrollTop = container.scrollHeight;
            }
          } catch (error) {
            console.error('Error loading chat history:', error);
          }
        };

        // تهيئة الوسائط وتحميل سجل المحادثة
        initMedia();
        loadChatHistory();

        // تنظيف الموارد عند إغلاق الصفحة
        window.addEventListener('beforeunload', cleanupResources);

      } catch (error) {
        console.error("Initialization error:", error);
        showErrorToast("حدث خطأ غير متوقع أثناء تحميل الجلسة");
      }
    });
  </script>
</body>
</html>







views\doctor-session.ejs
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>جلسة مع <%= session.patient.name %></title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .video-container {
      position: relative;
      background-color: #000;
    }
    .video-placeholder {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background-color: rgba(0, 0, 0, 0.7);
      z-index: 10;
      transition: opacity 0.3s;
      color: white;
    }
    .video-placeholder.hidden {
      opacity: 0;
      pointer-events: none;
    }
    .remote-video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .local-video {
      position: absolute;
      bottom: 20px;
      right: 20px;
      width: 160px;
      height: 120px;
      border: 2px solid white;
      border-radius: 8px;
      z-index: 15;
    }
    .connection-status {
      position: absolute;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 14px;
      z-index: 20;
      display: flex;
      align-items: center;
    }
    .connection-status i {
      margin-left: 5px;
    }
    .spinner {
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    .chat-container {
      display: flex;
      flex-direction: column;
      height: 100%;
    }
    .messages-container {
      flex: 1;
      overflow-y: auto;
      padding: 16px;
    }
    .message {
      max-width: 80%;
      padding: 12px 16px;
      border-radius: 18px;
      margin-bottom: 12px;
      position: relative;
      word-break: break-word;
    }
    .message.sent {
      background-color: #007bff;
      color: white;
      margin-left: auto;
      border-bottom-right-radius: 4px;
    }
    .message.received {
      background-color: #e9ecef;
      color: #333;
      margin-right: auto;
      border-bottom-left-radius: 4px;
    }
    .message-time {
      font-size: 11px;
      opacity: 0.8;
      margin-top: 4px;
      display: block;
      text-align: left;
    }
    .message.sent .message-time {
      text-align: right;
    }
    .input-container {
      display: flex;
      padding: 12px;
      border-top: 1px solid #e0e0e0;
      background-color: white;
    }
    .message-input {
      flex: 1;
      padding: 10px 16px;
      border: 1px solid #ddd;
      border-radius: 24px;
      outline: none;
      font-size: 15px;
    }
    .send-button {
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 50%;
      width: 44px;
      height: 44px;
      margin-right: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
    .file-upload-button {
      background-color: #6c757d;
      color: white;
      border: none;
      border-radius: 50%;
      width: 44px;
      height: 44px;
      margin-left: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
    .file-input {
      display: none;
    }
    .file-message {
      max-width: 80%;
      padding: 12px;
      border-radius: 12px;
      margin-bottom: 12px;
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
    }
    .file-message.sent {
      margin-left: auto;
      background-color: #e3f2fd;
      border-color: #bbdefb;
    }
    .file-message.received {
      margin-right: auto;
    }
    .file-icon {
      font-size: 36px;
      color: #6c757d;
      text-align: center;
      margin-bottom: 8px;
    }
    .file-name {
      font-weight: 500;
      margin-bottom: 4px;
      word-break: break-all;
    }
    .file-size {
      font-size: 12px;
      color: #6c757d;
      margin-bottom: 8px;
    }
    .file-download {
      display: inline-block;
      padding: 6px 12px;
      background-color: #007bff;
      color: white;
      border-radius: 20px;
      text-decoration: none;
      font-size: 13px;
    }
    .file-preview {
      max-width: 100%;
      max-height: 200px;
      border-radius: 8px;
      margin-top: 8px;
    }
    .upload-progress {
      width: 100%;
      height: 4px;
      background-color: #e9ecef;
      border-radius: 2px;
      margin-top: 8px;
      overflow: hidden;
    }
    .progress-bar {
      height: 100%;
      background-color: #007bff;
      width: 0%;
      transition: width 0.3s;
    }
    .error-toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #dc3545;
      color: white;
      padding: 12px 24px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      display: flex;
      align-items: center;
      z-index: 1000;
      transform: translateY(100px);
      opacity: 0;
      transition: all 0.3s ease;
    }
    .error-toast.show {
      transform: translateY(0);
      opacity: 1;
    }
    .error-icon {
      margin-left: 8px;
    }
  </style>
</head>
<body class="bg-gray-100 font-sans">
  <div class="flex flex-col h-screen">
    <header class="bg-blue-600 text-white p-4 text-center">
      <h1 class="text-xl font-bold">جلسة مع <%= session.patient.name %></h1>
    </header>

    <div class="flex flex-1 overflow-hidden">
      <!-- قسم الفيديو -->
      <div class="flex-1 bg-black relative">
        <div id="remoteVideoPlaceholder" class="video-placeholder">
          <div class="text-center">
            <i class="fas fa-user-injured text-5xl mb-4"></i>
            <p class="text-xl mb-2">في انتظار اتصال المريض...</p>
            <div class="flex items-center justify-center">
              <div class="spinner mr-2"><i class="fas fa-circle-notch text-2xl"></i></div>
              <span>جاري الاتصال...</span>
            </div>
          </div>
        </div>
        <video id="remoteVideo" autoplay playsinline class="remote-video"></video>
        <video id="localVideo" autoplay muted playsinline class="local-video"></video>
        <div id="connectionStatus" class="connection-status hidden">
          <span>جاري الاتصال...</span>
          <i class="fas fa-circle-notch spinner"></i>
        </div>
      </div>

      <!-- قسم المحادثة -->
      <div class="w-96 border-r border-gray-200 bg-white flex flex-col">
        <div class="p-4 border-b border-gray-200 font-bold">المحادثة</div>
        <div id="messagesContainer" class="messages-container"></div>
        <div class="input-container">
          <button id="sendButton" class="send-button">
            <i class="fas fa-paper-plane"></i>
          </button>
          <input id="messageInput" type="text" class="message-input" placeholder="اكتب رسالتك...">
          <button id="fileUploadButton" class="file-upload-button">
            <i class="fas fa-paperclip"></i>
          </button>
          <input id="fileInput" type="file" class="file-input" multiple>
        </div>
      </div>
    </div>
  </div>

  <div id="errorToast" class="error-toast">
    <span id="errorMessage"></span>
    <i class="fas fa-exclamation-circle error-icon"></i>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      try {
        // العناصر الأساسية
        const socket = io();
        const sessionId = "<%= session._id %>";
        const userType = "doctor";
        
        // عناصر واجهة المستخدم
        const remoteVideo = document.getElementById('remoteVideo');
        const localVideo = document.getElementById('localVideo');
        const remoteVideoPlaceholder = document.getElementById('remoteVideoPlaceholder');
        const connectionStatus = document.getElementById('connectionStatus');
        const messagesContainer = document.getElementById('messagesContainer');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const fileUploadButton = document.getElementById('fileUploadButton');
        const fileInput = document.getElementById('fileInput');
        const errorToast = document.getElementById('errorToast');
        const errorMessage = document.getElementById('errorMessage');

        // متغيرات حالة الجلسة
        let peerConnection;
        let localStream;
        let connectionTimeout;

        // ======================
        // دوال مساعدة
        // ======================

        // عرض رسالة خطأ
        const showError = (message, duration = 5000) => {
          errorMessage.textContent = message;
          errorToast.classList.add('show');
          
          setTimeout(() => {
            errorToast.classList.remove('show');
          }, duration);
        };

        // تحديث حالة الاتصال
        const updateConnectionStatus = (status, isConnected = false, isError = false) => {
          if (!connectionStatus) return;
          
          let iconClass = 'fa-circle-notch spinner';
          let statusClass = '';
          
          if (isConnected) {
            iconClass = 'fa-check-circle';
            statusClass = 'text-success';
          } else if (isError) {
            iconClass = 'fa-times-circle';
            statusClass = 'text-danger';
          }
          
          connectionStatus.innerHTML = `
            <span>${status}</span>
            <i class="fas ${iconClass} ${statusClass}"></i>
          `;
          
          connectionStatus.classList.remove('hidden');
        };

        // إنشاء عنصر رسالة نصية
        const createTextMessage = (sender, text, time) => {
          const messageDiv = document.createElement('div');
          messageDiv.className = `message ${sender === userType ? 'sent' : 'received'}`;
          
          messageDiv.innerHTML = `
            <div class="message-text">${text}</div>
            <span class="message-time">${time}</span>
          `;
          
          return messageDiv;
        };

        // إنشاء عنصر رسالة ملف
        const createFileMessage = (sender, fileData) => {
          const fileDiv = document.createElement('div');
          fileDiv.className = `file-message ${sender === userType ? 'sent' : 'received'}`;
          
          // تحديد أيقونة الملف حسب النوع
          let fileIcon = 'fa-file';
          const fileType = fileData.fileType || '';
          
          if (fileType.startsWith('image/')) fileIcon = 'fa-file-image';
          else if (fileType.includes('pdf')) fileIcon = 'fa-file-pdf';
          else if (fileType.includes('word')) fileIcon = 'fa-file-word';
          else if (fileType.includes('excel')) fileIcon = 'fa-file-excel';
          else if (fileType.includes('video')) fileIcon = 'fa-file-video';
          else if (fileType.includes('audio')) fileIcon = 'fa-file-audio';
          else if (fileType.includes('zip')) fileIcon = 'fa-file-archive';
          
          fileDiv.innerHTML = `
            <div class="file-icon">
              <i class="fas ${fileIcon}"></i>
            </div>
            <div class="file-name">${fileData.fileName}</div>
            <div class="file-size">${formatFileSize(fileData.fileSize)}</div>
            <a href="${fileData.fileUrl}" target="_blank" class="file-download">
              <i class="fas fa-download"></i> تحميل
            </a>
          `;
          
          // إضافة معاينة إذا كان الملف صورة
          if (fileType.startsWith('image/')) {
            fileDiv.innerHTML += `
              <img src="${fileData.fileUrl}" class="file-preview" alt="معاينة الصورة">
            `;
          }
          
          // إضافة وقت الرسالة
          const timeDiv = document.createElement('div');
          timeDiv.className = 'message-time';
          timeDiv.textContent = fileData.time || '';
          fileDiv.appendChild(timeDiv);
          
          return fileDiv;
        };

        // تنسيق حجم الملف
        const formatFileSize = (bytes) => {
          if (bytes === 0) return '0 بايت';
          const k = 1024;
          const sizes = ['بايت', 'كيلوبايت', 'ميجابايت', 'جيجابايت'];
          const i = Math.floor(Math.log(bytes) / Math.log(k));
          return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        };

        // تنظيف الموارد
        const cleanupResources = () => {
          if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
          }
          if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
          }
          clearTimeout(connectionTimeout);
        };

        const uploadFile = (file) => {
  return new Promise((resolve, reject) => {
    const formData = new FormData();
    formData.append('sessionFile', file);
    formData.append('sessionId', sessionId);
    formData.append('senderType', userType);
    
    // إضافة CSRF token من الكوكيز
    const csrfToken = document.cookie.split('; ').find(row => row.startsWith('XSRF-TOKEN='))?.split('=')[1];
    if (csrfToken) {
      formData.append('_csrf', csrfToken);
    }

    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/api/sessions/upload-file', true);
            // إنشاء رسالة تحميل مؤقتة
            const tempMessage = {
              sender: userType,
              fileName: file.name,
              fileSize: file.size,
              fileType: file.type,
              fileUrl: '#',
              uploading: true
            };
            
            const tempElement = createFileMessage(tempMessage.sender, tempMessage);
            messagesContainer.appendChild(tempElement);
            scrollToBottom();
            
            // متابعة تقدم الرفع
            xhr.upload.onprogress = (event) => {
              if (event.lengthComputable) {
                const progress = Math.round((event.loaded / event.total) * 100);
                const progressBar = tempElement.querySelector('.progress-bar');
                if (progressBar) {
                  progressBar.style.width = `${progress}%`;
                }
              }
            };

            xhr.onload = () => {
              if (xhr.status === 200) {
                const response = JSON.parse(xhr.responseText);
                resolve(response);
                
                // استبدال الرسالة المؤقتة بالنهائية
                tempElement.remove();
                const finalMessage = {
                  sender: userType,
                  fileName: response.fileData.fileName,
                  fileSize: response.fileData.fileSize,
                  fileType: response.fileData.fileType,
                  fileUrl: response.fileData.fileUrl,
                  time: new Date().toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' })
                };
                messagesContainer.appendChild(createFileMessage(finalMessage.sender, finalMessage));
                scrollToBottom();
              } else {
                reject(new Error('فشل في رفع الملف'));
                tempElement.remove();
                showError('فشل في رفع الملف');
              }
            };

            xhr.onerror = () => {
              reject(new Error('حدث خطأ في الاتصال'));
              tempElement.remove();
              showError('حدث خطأ أثناء رفع الملف');
            };

            xhr.send(formData);
          });
        };

        // التمرير إلى آخر رسالة
        const scrollToBottom = () => {
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        };

        // تحميل سجل المحادثة
        const loadChatHistory = async () => {
          try {
            const response = await fetch(`/api/sessions/${sessionId}/messages`);
            if (response.ok) {
              const messages = await response.json();
              
              messages.forEach(msg => {
                if (msg.type === 'text') {
                  messagesContainer.appendChild(createTextMessage(
                    msg.sender,
                    msg.message,
                    new Date(msg.timestamp).toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' })
                  ));
                } else if (msg.type === 'file') {
                  messagesContainer.appendChild(createFileMessage(
                    msg.sender,
                    {
                      ...msg.fileData,
                      time: new Date(msg.timestamp).toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' })
                    }
                  ));
                }
              });
              
              scrollToBottom();
            }
          } catch (error) {
            console.error('Error loading chat history:', error);
          }
        };

        // ======================
        // إعداد اتصال WebRTC
        // ======================

        const initWebRTC = async () => {
          try {
            updateConnectionStatus('جاري إعداد الاتصال...');
            
            // الحصول على وسائط المستخدم
            localStream = await navigator.mediaDevices.getUserMedia({
              video: true,
              audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true
              }
            });
            
            localVideo.srcObject = localStream;
            
            // تكوين اتصال Peer
            const configuration = {
              iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' },
                { urls: 'stun:stun2.l.google.com:19302' }
              ]
            };
            
            peerConnection = new RTCPeerConnection(configuration);
            
            // إضافة مسارات الوسائط المحلية
            localStream.getTracks().forEach(track => {
              peerConnection.addTrack(track, localStream);
            });
            
            // معالجة المرشحات ICE
            peerConnection.onicecandidate = (event) => {
              if (event.candidate) {
                socket.emit('iceCandidate', { sessionId, candidate: event.candidate });
              }
            };
            
            // معالجة تيار الوسائط البعيدة
            peerConnection.ontrack = (event) => {
              remoteVideo.srcObject = event.streams[0];
              remoteVideoPlaceholder.classList.add('hidden');
              updateConnectionStatus('متصل', true);
              clearTimeout(connectionTimeout);
            };
            
            // مراقبة حالة الاتصال
            peerConnection.oniceconnectionstatechange = () => {
              const state = peerConnection.iceConnectionState;
              
              if (state === 'connected' || state === 'completed') {
                updateConnectionStatus('متصل', true);
              } else if (state === 'disconnected' || state === 'failed') {
                updateConnectionStatus('تم قطع الاتصال', false, true);
                showError('تم قطع الاتصال بالمريض');
                cleanupResources();
              }
            };
            
            // انتظار العرض من المريض
            socket.on('offer', async (offer) => {
              try {
                updateConnectionStatus('جاري قبول الاتصال...');
                await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
                
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                
                socket.emit('answer', { sessionId, answer });
                updateConnectionStatus('جاري إكمال الاتصال...');
              } catch (error) {
                console.error('Error handling offer:', error);
                showError('فشل في إعداد اتصال الفيديو');
                updateConnectionStatus('فشل في الاتصال', false, true);
                cleanupResources();
              }
            });
            
            // معالجة مرشحات ICE الواردة
            socket.on('iceCandidate', async (candidate) => {
              try {
                if (peerConnection && candidate) {
                  await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                }
              } catch (error) {
                console.error('Error adding ICE candidate:', error);
              }
            });
            
            // مهلة الاتصال
            connectionTimeout = setTimeout(() => {
              if (!peerConnection.remoteDescription) {
                showError('تعذر الاتصال بالمريض. يرجى المحاولة مرة أخرى.');
                updateConnectionStatus('فشل في الاتصال', false, true);
                cleanupResources();
              }
            }, 30000);
            
          } catch (error) {
            console.error('Error initializing WebRTC:', error);
            showError('فشل في بدء الجلسة: ' + error.message);
            updateConnectionStatus('فشل في الاتصال', false, true);
            cleanupResources();
          }
        };

        // ======================
        // إعداد اتصال Socket.io
        // ======================

        socket.emit('joinSession', { sessionId, userType });
        
        // استقبال الرسائل النصية
        socket.on('newMessage', (message) => {
          messagesContainer.appendChild(createTextMessage(
            message.sender,
            message.text,
            message.time
          ));
          scrollToBottom();
        });
        
        // استقبال رسائل الملفات
        socket.on('newFileMessage', (fileData) => {
          messagesContainer.appendChild(createFileMessage(fileData.sender, fileData));
          scrollToBottom();
        });

        // ======================
        // معالجة أحداث واجهة المستخدم
        // ======================

        // إرسال رسالة نصية
        sendButton.addEventListener('click', () => {
          const message = messageInput.value.trim();
          if (message) {
            const timestamp = new Date();
            socket.emit('sendMessage', {
              sessionId,
              message,
              timestamp
            });
            messageInput.value = '';
          }
        });
        
        messageInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            sendButton.click();
          }
        });
        
        // رفع ملف
        fileUploadButton.addEventListener('click', () => {
          fileInput.click();
        });
        
        fileInput.addEventListener('change', async (e) => {
          const files = e.target.files;
          if (files && files.length > 0) {
            for (let i = 0; i < files.length; i++) {
              try {
                await uploadFile(files[i]);
              } catch (error) {
                console.error('Error uploading file:', error);
                showError('حدث خطأ أثناء رفع الملف');
              }
            }
            fileInput.value = '';
          }
        });
        
        // تنظيف الموارد عند إغلاق الصفحة
        window.addEventListener('beforeunload', cleanupResources);
        
        // بدء الجلسة
        initWebRTC();
        loadChatHistory();

      } catch (error) {
        console.error('Initialization error:', error);
        showError('حدث خطأ غير متوقع أثناء تحميل الجلسة');
      }
    });
  </script>
</body>
</html>






// server.js

const express = require("express");
const mongoose = require("mongoose");
const http = require("http");
const { Server } = require("socket.io");
const Patient = require("./models/patient.js");
const Appointment = require("./models/appointment.js");
const Admin = require("./models/admin.js");
const Doctor = require("./models/doctor.js");
const Receptionist = require("./models/receptionist.js");  
const { name, render } = require("ejs");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const verii = require("./middleware/veri.js");
const cookeparser = require("cookie-parser");
const csrf = require("csurf");
const fs = require("fs");
const nodemailer = require("nodemailer");
const path = require('path');
const exceljs = require('exceljs');
const pdfmake = require('pdfmake');
const multer = require('multer');

const secret = "fgrpekrfg";
const app = express();
const server = http.createServer(app);
const io = new Server(server);
const csrfProtection = csrf({ cookie: true });
app.set('views', path.join(__dirname, 'views'));
app.use(express.json());
app.use(cookeparser());
app.use(express.urlencoded({ extended: false }));
app.set("view engine", "ejs");
const csrfMiddleware = csrf({ cookie: true });
app.use((req, res, next) => {
  if (req.path === '/api/sessions/upload-file') {
    return next();
  }
  csrfMiddleware(req, res, next);
})
app.use(express.static('public')); 

const sessionFileStorage = multer.diskStorage({
    destination: (req, file, cb) => {
      const uploadDir = path.join(__dirname, 'public/session-files');
      if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
      }
      cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
      const ext = path.extname(file.originalname);
      cb(null, 'session-file-' + uniqueSuffix + ext);
    }
  });
  
  const uploadSessionFile = multer({ 
    storage: sessionFileStorage,
    limits: { fileSize: 10 * 1024 * 1024 } // 10MB
  });
const storage = multer.diskStorage({
    destination: (req, file, cb


    ) => {
        const dir = './public/images/doctors';
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        cb(null, dir);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, uniqueSuffix + '.png');
    }
});


const fileFilter = (req, file, cb) => {
    if (file.mimetype === 'image/png') {
        cb(null, true);
    } else {
        cb(new Error('يجب أن تكون الصورة بصيغة PNG'), false);
    }
};

const upload = multer({
    storage: storage,
    fileFilter: fileFilter,
    limits: { fileSize: 5 * 1024 * 1024 } 
});

app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).render("error", { message: "حدث خطأ في الخادم" });
});

const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'prot71099@gmail.com',
        pass: 'zywc hzez wvwk vnjn'
    }
});

async function sendVerificationCode(email, code) {
    console.log(`كود التحقق الخاص بك هو:${code}`);
    const mailOptions = {
        from: 'prot71099@gmail.com',
        to: email,
        subject: 'كود التحقق لتأكيد الحساب',
        text: `كود التحقق الخاص بك صالح لمدة 10 دقائق:${code}`
    };

    await transporter.sendMail(mailOptions);
}

function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function isStrongPassword(password) {
    const passwordRegex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,}$/;
    return passwordRegex.test(password);
}

app.use((err, req, res, next) => {
    fs.appendFileSync('error.log', `${new Date().toISOString()} - ${err.stack}\n`);
    res.status(500).render("error", { message: "حدث خطأ في الخادم" });
});

server.listen('8000', () => {
    console.log("server is running");
});

app.get("/", async (req, res) => {
    try {
        const token = req.cookies.token;
        if (token) {
            const decoded = jwt.verify(token, "fgrpekrfg");
            const patient = await Patient.findOne({ _id: decoded._id });
            if (patient) {
                res.render("index", { patient: patient, csrfToken: req.csrfToken() });
            } else {
                res.render("index", { patient: null, csrfToken: req.csrfToken() });
            }
        } else {
            res.render("index", { patient: null, csrfToken: req.csrfToken() });
        }
    } catch (error) {
        console.error(error);
        res.render("index", { patient: null, csrfToken: req.csrfToken() });
    }
});
const doctorAuth = async (req, res, next) => {
    try {
        const token = req.cookies.doctor_token;
        if (!token) {
            return res.redirect("/doctor/login");
        }

        const decoded = jwt.verify(token, secret);
        const doctor = await Doctor.findById(decoded._id);
        if (!doctor) {
            return res.redirect("/doctor/login");
        }

        req.doctor = doctor;
        next();
    } catch (error) {
        console.error("Error in doctorAuth middleware:", error);
        res.redirect("/doctor/login");
    }
};
const adminAuth = async (req, res, next) => {
    try {
        const token = req.cookies.admin_token;
        if (!token) {
            return res.redirect("/admin/login");
        }

        const decoded = jwt.verify(token, secret);
        const admin = await Admin.findById(decoded._id);
        if (!admin) {
            return res.redirect("/admin/login");
        }

        req.admin = admin;
        next();
    } catch (error) {
        console.error("Error in adminAuth middleware:", error);
        res.redirect("/admin/login");
    }
};

const receptionistAuth = async (req, res, next) => {
    try {
        const token = req.cookies.receptionist_token;
        if (!token) {
            return res.redirect("/receptionist/login");
        }

        const decoded = jwt.verify(token, secret);
        const receptionist = await Receptionist.findById(decoded._id);
        if (!receptionist) {
            return res.redirect("/receptionist/login");
        }

        req.receptionist = receptionist;
        next();
    } catch (error) {
        console.error("Error in receptionistAuth middleware:", error);
        res.redirect("/receptionist/login");
    }
};
app.post('/api/sessions/upload-file', uploadSessionFile.single('sessionFile'), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ error: 'لم يتم رفع أي ملف' });
      }
  
      const { sessionId, senderType } = req.body;
      const session = await Appointment.findById(sessionId);
      if (!session) {
        fs.unlinkSync(req.file.path);
        return res.status(404).json({ error: 'الجلسة غير موجودة' });
      }
  
      const fileData = {
        fileName: req.file.originalname,
        fileSize: req.file.size,
        fileType: req.file.mimetype,
        fileUrl: `/session-files/${req.file.filename}`,
        timestamp: new Date()
      };
  
      // حفظ الملف في سجل المحادثة
      session.chatHistory.push({
        sender: senderType,
        message: fileData.fileName,
        timestamp: new Date(),
        type: "file",
        fileData: fileData
      });
  
      await session.save();
  
      // إرسال الملف لجميع المشاركين في الجلسة
      io.to(sessionId).emit('newFileMessage', {
        ...fileData,
        sender: senderType,
        time: new Date().toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' })
      });
  
      res.json({
        success: true,
        fileData: fileData
      });
  
    } catch (error) {
      console.error('Error uploading session file:', error);
      if (req.file) {
        fs.unlinkSync(req.file.path);
      }
      res.status(500).json({ error: 'حدث خطأ أثناء رفع الملف' });
    }
  });
  
  // مسار لتحميل ملفات الجلسات
  app.use('/session-files', express.static(path.join(__dirname, 'public/session-files')));
  
  // مسار لجلب سجل المحادثة
  app.get('/api/sessions/:sessionId/messages', async (req, res) => {
    try {
      const session = await Appointment.findById(req.params.sessionId);
      if (!session) {
        return res.status(404).json({ error: 'الجلسة غير موجودة' });
      }
  
      res.json(session.chatHistory);
    } catch (error) {
      console.error('Error fetching session messages:', error);
      res.status(500).json({ error: 'حدث خطأ أثناء جلب سجل المحادثة' });
    }
  });
app.get("/doctor/sessions", doctorAuth, async (req, res) => {
    try {
      const sessions = await Appointment.find({ doctor: req.doctor._id })
        .populate("patient", "name profileImage")
        .sort({ date: 1, time: 1 });
      res.render("doctor-sessions", {
        doctor: req.doctor,
        sessions,
        csrfToken: req.csrfToken(),
      });
    } catch (error) {
      res.status(500).json({ error: "خطأ في تحميل الجلسات" });
    }
  });

app.get("/patient/sessions", verii, async (req, res) => {
    try {
      const sessions = await Appointment.find({
        patient: req.patient._id,
        date: { $gte: new Date() },
      })
        .populate("doctor", "username profileImage specialization")
        .sort({ date: 1, time: 1 });
      res.render("patient-sessions", {
        patient: req.patient,
        sessions,
        csrfToken: req.csrfToken(),
      });
    } catch (error) {
      res.status(500).json({ error: "خطأ في تحميل الجلسات" });
    }
  });
  
 
  app.post("/api/sessions/start", doctorAuth, async (req, res) => {
    try {
      const { sessionId } = req.body;
      if (!sessionId) return res.status(400).json({ error: "معرف الجلسة مفقود" });
  
      const session = await Appointment.findById(sessionId).populate("patient");
      if (!session) return res.status(404).json({ error: "الجلسة غير موجودة" });
      if (session.doctor.toString() !== req.doctor._id.toString()) {
        return res.status(403).json({ error: "غير مصرح" });
      }
  
      await session.startSession();
      io.to(sessionId).emit("sessionStarted", {
        sessionId,
        doctorName: req.doctor.username,
      });
  
      res.json({ success: true, redirectUrl: `/doctor/session/${sessionId}` });
    } catch (error) {
      res.status(500).json({ error: "فشل في بدء الجلسة" });
    }
  });
  
 
  app.get("/doctor/session/:id", doctorAuth, async (req, res) => {
    try {
      const session = await Appointment.findById(req.params.id).populate(
        "patient",
        "name"
      );
      if (!session) return res.status(404).json({ error: "الجلسة غير موجودة" });
      if (session.doctor.toString() !== req.doctor._id.toString()) {
        return res.status(403).json({ error: "غير مصرح" });
      }
      res.render("doctor-session", { session, csrfToken: req.csrfToken() });
    } catch (error) {
      res.status(500).json({ error: "خطأ في تحميل الجلسة" });
    }
  });
  
 
  app.get("/patient/session/:id", verii, async (req, res) => {
    try {
      const session = await Appointment.findById(req.params.id).populate(
        "doctor",
        "username"
      );
      if (!session) return res.status(404).json({ error: "الجلسة غير موجودة" });
      if (session.patient.toString() !== req.patient._id.toString()) {
        return res.status(403).json({ error: "غير مصرح" });
      }
      res.render("patient-session", { session, csrfToken: req.csrfToken() });
    } catch (error) {
      res.status(500).json({ error: "خطأ في تحميل الجلسة" });
    }
  });
  
  // Socket.io Configuration
  io.on("connection", (socket) => {
    console.log("New user connected:", socket.id);
  
    socket.on("joinSession", ({ sessionId, userType }) => {
      socket.join(sessionId);
      socket.userType = userType;
      socket.broadcast.to(sessionId).emit("userConnected", { userType });
    });
  
    
socket.on("sendMessage", async ({ sessionId, message, timestamp }) => {
    const session = await Appointment.findById(sessionId);
    if (session) {
        session.chatHistory.push({
            sender: socket.userType,
            message,
            timestamp: new Date(timestamp),
            type: "text"
        });
        await session.save();
        const time = new Date(timestamp).toLocaleTimeString('ar-EG', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        io.to(sessionId).emit("newMessage", {
            sender: socket.userType,
            text: message,
            time: time
        });
    }
});
  
    socket.on("offer", ({ sessionId, offer }) => {
      socket.to(sessionId).emit("offer", offer);
    });
  
    socket.on("answer", ({ sessionId, answer }) => {
      socket.to(sessionId).emit("answer", answer);
    });
  
    socket.on("iceCandidate", ({ sessionId, candidate }) => {
      socket.to(sessionId).emit("iceCandidate", candidate);
    });
  
    socket.on("disconnect", () => {
      console.log("User disconnected:", socket.id);
    });
  });
  
