<%- include('headerpatient') %>
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>حجز موعد</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        .doctor-card {
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }
        .doctor-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }
        .slot {
            transition: all 0.2s ease;
            cursor: pointer;
        }
        .slot:hover:not(.unavailable):not(.booked) {
            transform: scale(1.05);
        }
        .slot.selected {
            transform: scale(1.1);
        }
        .payment-method {
            transition: all 0.2s ease;
        }
        .payment-method:hover:not(.disabled) {
            transform: translateY(-3px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .confirmation-modal {
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        .confirmation-modal.active {
            opacity: 1;
            visibility: visible;
        }
        .loading-spinner {
            display: inline-block;
            width: 1.25rem;
            height: 1.25rem;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .toast {
            transform: translateY(-100px);
            opacity: 0;
            transition: all 0.3s ease;
        }
        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- رسائل الخطأ -->
        <div id="errorContainer" class="bg-red-50 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-r hidden">
            <p id="errorText"></p>
        </div>

        <% if (!patient) { %>
            <div class="bg-red-50 border-l-4 border-red-500 text-red-700 p-4 rounded-r">
                <p>يجب تسجيل الدخول كـ مريض أولاً</p>
            </div>
        <% } else { %>
            <!-- بطاقة الطبيب -->
            <div class="doctor-card bg-white rounded-xl p-6 mb-8 flex flex-col md:flex-row justify-between items-center">
                <div class="flex items-center mb-4 md:mb-0">
                    <img src="<%= doctor.profileImage || '/images/default-doctor.jpg' %>" 
                         alt="<%= doctor.username %>" 
                         class="w-16 h-16 rounded-full object-cover border-2 border-gray-100">
                    <div class="mr-4">
                        <h2 class="text-xl font-bold text-gray-800"><%= doctor.username %></h2>
                        <p class="text-gray-600"><%= doctor.specialization %></p>
                    </div>
                </div>
                <div class="flex items-center">
                    <span class="px-4 py-2 rounded-full text-sm font-medium 
                        <%= doctor.acceptingAppointments ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                        <%= doctor.acceptingAppointments ? 'يقبل الحجوزات حالياً' : 'لا يقبل الحجوزات حالياً' %>
                    </span>
                </div>
            </div>

            <!-- موعد موجود مسبقاً -->
            <% if (locals.existingAppointment && existingAppointment.status !== 'مكتمل') { %>
            <div class="bg-blue-50 border-l-4 border-blue-500 text-blue-700 p-4 mb-6 rounded-r">
                <h3 class="font-bold mb-2">لديك موعد محجز مسبقاً مع هذا الطبيب</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-2">
                    <p><i class="far fa-calendar-alt ml-2"></i> <%= new Date(existingAppointment.date).toLocaleDateString('ar-EG') %></p>
                    <p><i class="far fa-clock ml-2"></i> <%= existingAppointment.time %></p>
                    <p><i class="fas fa-info-circle ml-2"></i> الحالة: <%= existingAppointment.status %></p>
                    <% if (existingAppointment.paymentStatus) { %>
                        <p><i class="fas fa-money-bill-wave ml-2"></i> حالة الدفع: <%= existingAppointment.paymentStatus %></p>
                    <% } %>
                </div>
            </div>
            <% } %>

            <!-- نموذج الحجز -->
            <div class="bg-white rounded-xl shadow-sm p-6">
                <h2 class="text-xl font-bold text-gray-800 mb-6">حجز موعد جديد</h2>
                
                <form id="bookingForm">
                    <input type="hidden" name="doctorId" value="<%= doctor._id %>">
                    <input type="hidden" name="patientId" value="<%= patient._id %>">
                    <input type="hidden" name="time" id="selectedTime">
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                    
                    <!-- تاريخ الموعد -->
                    <div class="mb-6">
                        <label for="date" class="block text-gray-700 font-medium mb-2">تاريخ الموعد:</label>
                        <input type="text" id="date" name="date" 
                            class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-200 focus:border-blue-500"
                            placeholder="اختر تاريخ" 
                            <%= locals.existingAppointment && existingAppointment.status !== 'مكتمل' || !doctor.acceptingAppointments ? 'disabled' : '' %>
                            required>
                    </div>
                    
                    <!-- الأوقات المتاحة -->
                    <div class="mb-6">
                        <label class="block text-gray-700 font-medium mb-2">الأوقات المتاحة:</label>
                        <div id="timeSlots" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3">
                            <% if (locals.existingAppointment && existingAppointment.status !== 'مكتمل') { %>
                                <div class="slot booked bg-yellow-100 text-yellow-800 p-4 rounded-lg text-center cursor-not-allowed">
                                    لديك موعد مسبق
                                </div>
                            <% } else if (!doctor.acceptingAppointments) { %>
                                <div class="slot unavailable bg-red-100 text-red-800 p-4 rounded-lg text-center cursor-not-allowed">
                                    الحجوزات متوقفة
                                </div>
                            <% } else { %>
                                <div class="slot unavailable bg-gray-100 text-gray-500 p-4 rounded-lg text-center cursor-not-allowed">
                                    اختر تاريخاً أولاً
                                </div>
                            <% } %>
                        </div>
                    </div>
                    
                    <!-- الملاحظات -->
                    <div class="mb-6">
                        <label for="notes" class="block text-gray-700 font-medium mb-2">ملاحظات (اختياري):</label>
                        <textarea id="notes" name="notes" rows="3"
                            class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-200 focus:border-blue-500"
                            placeholder="أي ملاحظات تريد إضافتها..."
                            <%= locals.existingAppointment && existingAppointment.status !== 'مكتمل' || !doctor.acceptingAppointments ? 'disabled' : '' %>></textarea>
                    </div>
                    
                    <!-- زر الحجز -->
                    <button type="button" id="submitBooking" 
                        class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition duration-200 flex justify-center items-center"
                        <%= locals.existingAppointment && existingAppointment.status !== 'مكتمل' || !doctor.acceptingAppointments ? 'disabled' : '' %>>
                        <span id="submitText">
                            <%= locals.existingAppointment && existingAppointment.status !== 'مكتمل' ? 'لديك موعد مسبق' : !doctor.acceptingAppointments ? 'الحجوزات متوقفة' : 'تأكيد الحجز' %>
                        </span>
                        <span id="submitSpinner" class="loading-spinner ml-2 hidden"></span>
                    </button>
                </form>
            </div>
        <% } %>
    </div>

    <!-- نموذج التأكيد -->
    <div id="confirmationModal" class="confirmation-modal fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div class="bg-white rounded-xl p-6 w-full max-w-md">
            <h3 id="modalTitle" class="text-xl font-bold text-gray-800 mb-4">تأكيد الحجز</h3>
            <div id="modalContent">
                <p id="modalMessage" class="text-gray-600 mb-6">هل أنت متأكد من حجز الموعد في الوقت المحدد؟</p>
                <div class="mb-6">
                    <label class="block text-gray-700 font-medium mb-2">طريقة الدفع:</label>
                    <div class="grid grid-cols-1 gap-4">
                        <div class="payment-method">
                            <input type="radio" id="electronicPayment" name="paymentMethod" value="electronic" checked class="hidden">
                            <label for="electronicPayment" class="flex flex-col items-center p-4 border-2 border-blue-500 bg-blue-50 rounded-lg cursor-pointer h-full">
                                <i class="fas fa-credit-card text-3xl text-blue-600 mb-2"></i>
                                <span class="font-medium">الدفع الإلكتروني</span>
                                <span class="text-sm text-gray-500 mt-1">دفع آمن عبر الإنترنت</span>
                            </label>
                        </div>
                        <div class="payment-method">
                            <input type="radio" id="walletPayment" name="paymentMethod" value="wallet" class="hidden">
                            <label for="walletPayment" class="flex flex-col items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer h-full">
                                <i class="fas fa-wallet text-3xl text-gray-600 mb-2"></i>
                                <span class="font-medium">الدفع عبر المحفظة</span>
                                <span class="text-sm text-gray-500 mt-1">الرصيد الحالي: <%= patient.wallet.balance.toFixed(2) %> ر.س</span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="flex justify-end space-x-3 rtl:space-x-reverse">
                <button id="cancelBookingBtn" class="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition">
                    إلغاء
                </button>
                <button id="confirmBookingBtn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center">
                    <span id="confirmText">تأكيد</span>
                    <span id="confirmSpinner" class="loading-spinner ml-2 hidden"></span>
                </button>
            </div>
        </div>
    </div>

    <!-- رسائل التنبيه -->
    <div id="toast" class="toast fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white font-medium hidden"></div>

    <!-- المكتبات الخارجية -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const errorContainer = document.getElementById('errorContainer');
            const errorText = document.getElementById('errorText');
            const dateInput = document.getElementById('date');
            const timeSlotsContainer = document.getElementById('timeSlots');
            const submitBtn = document.getElementById('submitBooking');
            const submitText = document.getElementById('submitText');
            const submitSpinner = document.getElementById('submitSpinner');
            const confirmationModal = document.getElementById('confirmationModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalMessage = document.getElementById('modalMessage');
            const modalContent = document.getElementById('modalContent');
            const confirmBookingBtn = document.getElementById('confirmBookingBtn');
            const cancelBookingBtn = document.getElementById('cancelBookingBtn');
            const confirmText = document.getElementById('confirmText');
            const confirmSpinner = document.getElementById('confirmSpinner');
            const toast = document.getElementById('toast');
            
            // تهيئة منتقي التاريخ
            const datePicker = flatpickr(dateInput, {
                locale: 'ar',
                minDate: 'today',
                maxDate: new Date().fp_incr(30),
                disable: [
                    function(date) {
                        const availableDays = JSON.parse('<%- JSON.stringify(doctor.availableDays || []) %>');
                        if (availableDays.length === 0) return false;
                        
                        const day = date.getDay();
                        const dayNames = ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'];
                        return !availableDays.includes(dayNames[day]);
                    }
                ]
            });

            // عند تغيير التاريخ
            dateInput.addEventListener('change', function() {
                const date = this.value;
                const doctorId = '<%= doctor._id %>';
                const patientId = '<%= patient._id %>';
                
                if (date) {
                    loadAvailableSlots(doctorId, date, patientId);
                } else {
                    updateTimeSlotsDisplay([], 'اختر تاريخاً أولاً');
                }
            });

            // عند النقر على تأكيد الحجز
            submitBtn.addEventListener('click', async function() {
                const timeSlot = document.getElementById('selectedTime').value;
                
                if (!timeSlot) {
                    showError('الرجاء اختيار وقت');
                    return;
                }
                
                // التحقق من عدم وجود موعد مسبق
                try {
                    const checkResponse = await axios.get(`/check-existing-appointment?doctorId=<%= doctor._id %>&patientId=<%= patient._id %>`);
                    
                    if (checkResponse.data.hasExisting) {
                        showError('لديك موعد محجز مسبقاً مع هذا الطبيب');
                        setTimeout(() => window.location.reload(), 2000);
                        return;
                    }
                    
                    // عرض نموذج التأكيد
                    const date = new Date(dateInput.value);
                    const dayNames = ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'];
                    const dayName = dayNames[date.getDay()];
                    
                    modalTitle.textContent = 'تأكيد حجز الموعد';
                    confirmationModal.classList.add('active');
                    
                } catch (error) {
                    console.error('Error checking existing appointment:', error);
                    showError('حدث خطأ أثناء التحقق من المواعيد');
                }
            });

            // تأكيد الحجز
            confirmBookingBtn.addEventListener('click', async function() {
                try {
                    confirmText.classList.add('hidden');
                    confirmSpinner.classList.remove('hidden');
                    
                    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
                    const formData = {
                        doctorId: '<%= doctor._id %>',
                        date: dateInput.value,
                        time: document.getElementById('selectedTime').value,
                        notes: document.getElementById('notes').value,
                        paymentMethod: paymentMethod === 'electronic' ? 'إلكتروني' : 'محفظة',
                        _csrf: '<%= csrfToken %>'
                    };
                    
                    const response = await axios.post('/book-appointment', formData);
                    
                    if (response.data.success) {
                        showToast('تم حجز الموعد بنجاح', 'success');
                        confirmationModal.classList.remove('active');
                        
                        if (paymentMethod === 'electronic') {
                            // توجيه إلى صفحة الدفع إذا كان الدفع إلكتروني
                            setTimeout(() => {
                                window.location.href = `/payment/${response.data.appointment.id}`;
                            }, 1500);
                        } else if (paymentMethod === 'wallet') {
                            // إذا كان الدفع عبر المحفظة، تحديث الصفحة
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        }
                    } else {
                        throw new Error(response.data.message || 'حدث خطأ أثناء الحجز');
                    }
                } catch (error) {
                    console.error('Error booking appointment:', error);
                    showError(error.response?.data?.message || error.message);
                } finally {
                    confirmText.classList.remove('hidden');
                    confirmSpinner.classList.add('hidden');
                }
            });

            // إلغاء الحجز
            cancelBookingBtn.addEventListener('click', function() {
                confirmationModal.classList.remove('active');
            });

            // تحميل الأوقات المتاحة
            async function loadAvailableSlots(doctorId, date, patientId) {
                try {
                    updateTimeSlotsDisplay([], 'جارٍ تحميل الأوقات المتاحة...');
                    
                    const response = await axios.get(`/get-available-slots?doctorId=${doctorId}&date=${date}&patientId=${patientId}`);
                    
                    if (response.data.message && response.data.message.includes("الطبيب لم يحدد")) {
                        updateTimeSlotsDisplay([], 'الطبيب لم يحدد أوقات العمل بعد');
                        return;
                    }
                    
                    if (response.data.existingAppointment) {
                        window.location.reload();
                        return;
                    }
                    
                    if (response.data.availableSlots && response.data.availableSlots.length > 0) {
                        updateTimeSlotsDisplay(response.data.availableSlots);
                    } else {
                        updateTimeSlotsDisplay([], 'لا توجد أوقات متاحة في هذا التاريخ');
                    }
                } catch (error) {
                    console.error('Error loading available slots:', error);
                    updateTimeSlotsDisplay([], 'حدث خطأ أثناء جلب الأوقات المتاحة');
                }
            }

            // تحديث عرض الأوقات المتاحة
            function updateTimeSlotsDisplay(slots, message = null) {
                timeSlotsContainer.innerHTML = '';
                
                if (message) {
                    const messageElement = document.createElement('div');
                    messageElement.className = 'slot unavailable bg-gray-100 text-gray-500 p-4 rounded-lg text-center col-span-full';
                    messageElement.textContent = message;
                    timeSlotsContainer.appendChild(messageElement);
                    return;
                }
                
                if (slots.length === 0) {
                    updateTimeSlotsDisplay([], 'لا توجد أوقات متاحة في هذا التاريخ');
                    return;
                }
                
                slots.forEach(slot => {
                    const slotElement = document.createElement('div');
                    slotElement.className = 'slot bg-blue-50 text-blue-800 p-4 rounded-lg text-center font-medium';
                    slotElement.textContent = slot;
                    
                    slotElement.addEventListener('click', function() {
                        document.querySelectorAll('.slot').forEach(el => {
                            el.classList.remove('selected', 'bg-blue-500', 'text-white');
                            el.classList.add('bg-blue-50', 'text-blue-800');
                        });
                        
                        this.classList.remove('bg-blue-50', 'text-blue-800');
                        this.classList.add('selected', 'bg-blue-500', 'text-white');
                        document.getElementById('selectedTime').value = convertTo24Hour(slot);
                    });
                    
                    timeSlotsContainer.appendChild(slotElement);
                });
            }

            // تحويل الوقت إلى تنسيق 24 ساعة
            function convertTo24Hour(time12) {
                const [time, period] = time12.split(' ');
                let [hours, minutes] = time.split(':');
                
                hours = parseInt(hours);
                if (period === 'م' && hours < 12) hours += 12;
                if (period === 'ص' && hours === 12) hours = 0;
                
                return `${hours.toString().padStart(2, '0')}:${minutes}`;
            }

            // تحويل الوقت إلى تنسيق 12 ساعة
            function convertTo12Hour(time24) {
                let [hours, minutes] = time24.split(':');
                hours = parseInt(hours);
                const period = hours >= 12 ? 'م' : 'ص';
                hours = hours % 12 || 12;
                return `${hours}:${minutes.toString().padStart(2, '0')} ${period}`;
            }

            // عرض رسالة الخطأ
            function showError(message) {
                errorText.textContent = message;
                errorContainer.classList.remove('hidden');
                setTimeout(() => errorContainer.classList.add('hidden'), 5000);
            }

            // عرض رسالة التنبيه
            function showToast(message, type = 'success') {
                toast.textContent = message;
                toast.className = `toast fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white font-medium ${
                    type === 'success' ? 'bg-green-500' : 'bg-red-500'
                } show`;
                
                setTimeout(() => {
                    toast.classList.remove('show');
                }, 5000);
            }

            // تغيير مظهر طريقة الدفع عند الاختيار
            document.querySelectorAll('input[name="paymentMethod"]').forEach(input => {
                input.addEventListener('change', function() {
                    document.querySelectorAll('.payment-method label').forEach(label => {
                        label.classList.remove('border-blue-500', 'bg-blue-50');
                    });
                    this.nextElementSibling.classList.add('border-blue-500', 'bg-blue-50');
                });
            });
        });
    </script>
</body>
</html>
<%- include('footerpatient') %>