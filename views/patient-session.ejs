

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>جلسة مع د. <%= session.doctor.username %></title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .video-container { position: relative; }
    .video-placeholder { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }
    .message {
      max-width: 70%;
      padding: 12px;
      border-radius: 20px;
      margin: 8px 0;
      transition: opacity 0.3s;
    }
    .message.sent {
      background: #007bff;
      color: white;
      margin-left: auto;
      border-bottom-right-radius: 2px;
    }
    .message.received {
      background: #e9ecef;
      color: #333;
      margin-right: auto;
      border-bottom-left-radius: 2px;
    }
    .message-time {
      font-size: 0.75rem;
      color: #666;
      margin-top: 4px;
    }
  </style>
</head>
<body class="bg-gray-100 font-sans">
  <div class="flex flex-col h-screen">
    <div class="bg-blue-600 text-white p-4 text-center">
      <h2 class="text-xl font-bold">جلسة مع د. <%= session.doctor.username %></h2>
    </div>
    <div class="flex flex-1 overflow-hidden">
      <div class="flex-2 bg-gray-900 video-container">
        <div id="remoteVideoPlaceholder" class="video-placeholder flex flex-col items-center justify-center text-white bg-gray-700">
          <i class="fas fa-user-doctor text-6xl mb-4"></i>
          <p>في انتظار اتصال الدكتور...</p>
        </div>
        <video id="remoteVideo" autoplay playsinline class="w-full h-full object-cover"></video>
        <video id="localVideo" autoplay muted playsinline class="absolute bottom-4 right-4 w-48 h-36 border-2 border-white rounded-lg"></video>
      </div>
      <div class="flex-1 flex flex-col bg-white border-l">
        <div class="p-4 border-b font-bold text-gray-800">المحادثة</div>
        <div id="messagesContainer" class="flex-1 overflow-y-auto p-4 space-y-4"></div>
        <div class="p-4 border-t flex">
          <input id="messageInput" type="text" class="flex-1 p-2 border rounded-full outline-none" placeholder="اكتب رسالتك...">
          <button id="sendMessageBtn" class="bg-blue-600 text-white p-2 ml-2 rounded-full w-10 h-10 flex items-center justify-center">
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
        <div id="errorMessage" class="text-red-500 text-center p-2 hidden"></div>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const sessionId = "<%= session._id %>";
    const userType = "patient";

    socket.emit("joinSession", { sessionId, userType });

    const configuration = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };
    const peerConnection = new RTCPeerConnection(configuration);

    async function initMedia() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        document.getElementById("localVideo").srcObject = stream;
        stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));

        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        socket.emit("offer", { sessionId, offer });
      } catch (error) {
        showError("فشل في الوصول إلى الكاميرا أو الميكروفون: " + error.message);
      }
    }

    peerConnection.ontrack = event => {
      document.getElementById("remoteVideo").srcObject = event.streams[0];
      document.getElementById("remoteVideoPlaceholder").classList.add("hidden");
    };

    peerConnection.onicecandidate = event => {
      if (event.candidate) socket.emit("iceCandidate", { sessionId, candidate: event.candidate });
    };

    socket.on("answer", async answer => {
      await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on("iceCandidate", async candidate => {
      await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    });

    socket.on("newMessage", message => {
      const messagesContainer = document.getElementById("messagesContainer");
      const messageElement = document.createElement("div");
      messageElement.classList.add("message", "p-3", "rounded-lg", message.sender === userType ? "sent" : "received");
      messageElement.innerHTML = `
        <div class="message-text">${message.text}</div>
        <div class="message-time">${message.time}</div>
      `;
      messagesContainer.appendChild(messageElement);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    });

    document.getElementById("sendMessageBtn").addEventListener("click", () => {
      const messageInput = document.getElementById("messageInput");
      const message = messageInput.value.trim();
      if (message) {
        const timestamp = new Date();
        socket.emit("sendMessage", { 
          sessionId, 
          message,
          timestamp
        });
        messageInput.value = "";
      }
    });

    function showError(message) {
      const errorDiv = document.getElementById("errorMessage");
      errorDiv.textContent = message;
      errorDiv.classList.remove("hidden");
      setTimeout(() => errorDiv.classList.add("hidden"), 5000);
    }

    initMedia();
  </script>
</body>
</html>