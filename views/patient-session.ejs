<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>جلسة مع د. <%= session.doctor.username %></title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .video-container { position: relative; padding-bottom: 56.25%; }
    .video-element { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }
    .message { max-width: 70%; margin: 0.5rem 0; }
  </style>
</head>
<body class="bg-gray-100 font-sans">
  <div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg text-center">
      <i class="fas fa-spinner fa-spin text-4xl text-blue-500 mb-4"></i>
      <p class="text-lg">جارِ الاتصال بالطبيب...</p>
    </div>
  </div>

  <div class="flex flex-col h-screen">
    <!-- Header -->
    <div class="bg-blue-600 text-white p-4 text-center">
      <h2 class="text-xl font-bold">جلسة مع د. <%= session.doctor.username %></h2>
    </div>

    <!-- Main Content -->
    <div class="flex flex-1 overflow-hidden">
      <!-- Video Section -->
      <div class="flex-1 bg-gray-900 relative">
        <div id="remoteVideoContainer" class="video-container">
          <div id="remoteVideoPlaceholder" class="video-element flex flex-col items-center justify-center text-white bg-gray-800">
            <i class="fas fa-user-doctor text-6xl mb-4"></i>
            <p>في انتظار اتصال الطبيب...</p>
          </div>
          <video id="remoteVideo" autoplay playsinline class="video-element hidden"></video>
        </div>
        <video id="localVideo" autoplay muted playsinline class="absolute bottom-4 right-4 w-48 h-36 border-2 border-white rounded-lg"></video>
      </div>

      <!-- Chat Section -->
      <div class="w-96 flex flex-col border-r bg-white">
        <div class="p-4 border-b font-bold">المحادثة</div>
        <div id="messagesContainer" class="flex-1 overflow-y-auto p-4"></div>
        <div class="p-4 border-t">
          <div class="flex">
            <input id="messageInput" type="text" class="flex-1 p-2 border rounded-l-full outline-none" placeholder="اكتب رسالتك...">
            <button id="sendMessageBtn" class="bg-blue-600 text-white p-2 rounded-r-full w-12">
              <i class="fas fa-paper-plane"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      const socket = io();
      const sessionId = "<%= session._id %>";
      const userType = "patient";
      let peerConnection;

      // عناصر واجهة المستخدم
      const elements = {
        loading: document.getElementById('loadingOverlay'),
        remoteVideo: document.getElementById('remoteVideo'),
        localVideo: document.getElementById('localVideo'),
        remotePlaceholder: document.getElementById('remoteVideoPlaceholder'),
        messagesContainer: document.getElementById('messagesContainer'),
        messageInput: document.getElementById('messageInput'),
        sendButton: document.getElementById('sendMessageBtn')
      };

      // تهيئة اتصال WebRTC
      async function initWebRTC() {
        try {
          elements.loading.style.display = 'flex';
          
          const configuration = {
            iceServers: [
              { urls: 'stun:stun.l.google.com:19302' },
              { urls: 'stun:stun1.l.google.com:19302' }
            ]
          };

          peerConnection = new RTCPeerConnection(configuration);
          
          // إدارة ICE Candidates
          peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
              socket.emit('iceCandidate', { candidate, sessionId });
            }
          };

          // عند استقبال تيار الفيديو
          peerConnection.ontrack = (event) => {
            elements.remoteVideo.srcObject = event.streams[0];
            elements.remoteVideo.classList.remove('hidden');
            elements.remotePlaceholder.classList.add('hidden');
            elements.loading.style.display = 'none';
          };

          // الحصول على وسائط المستخدم
          const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
          elements.localVideo.srcObject = stream;
          stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));

          // الانضمام إلى الجلسة
          socket.emit('joinSession', { sessionId, userType });

          // إنشاء عرض اتصال
          const offer = await peerConnection.createOffer();
          await peerConnection.setLocalDescription(offer);
          socket.emit('offer', { offer, sessionId });

          // استقبال الإجابات
          socket.on('answer', async (answer) => {
            await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
          });

          socket.on('iceCandidate', async (candidate) => {
            try {
              await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
            } catch (error) {
              console.error('Error adding ICE candidate:', error);
            }
          });

        } catch (error) {
          console.error('WebRTC initialization error:', error);
          elements.loading.style.display = 'none';
          alert('حدث خطأ في تهيئة الاتصال: ' + error.message);
        }
      }

      // تهيئة الدردشة (نفس الكود في doctor-session.ejs)
      function initChat() {
        socket.on('newMessage', (message) => {
          const messageElement = document.createElement('div');
          messageElement.className = `message p-3 rounded-lg ${message.sender === userType ? 'bg-blue-500 text-white ml-auto' : 'bg-gray-200 mr-auto'}`;
          
          const textElement = document.createElement('div');
          textElement.textContent = message.text;
          
          const timeElement = document.createElement('div');
          timeElement.className = 'text-xs mt-1 opacity-75';
          timeElement.textContent = message.time;
          
          messageElement.appendChild(textElement);
          messageElement.appendChild(timeElement);
          elements.messagesContainer.appendChild(messageElement);
          elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;
        });

        elements.sendButton.addEventListener('click', sendMessage);
        elements.messageInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') sendMessage();
        });
      }

      function sendMessage() {
        const message = elements.messageInput.value.trim();
        if (message) {
          const timestamp = new Date();
          const timeString = timestamp.toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' });
          
          socket.emit('sendMessage', { 
            sessionId, 
            message,
            timestamp: timeString,
            sender: userType
          });
          
          elements.messageInput.value = '';
        }
      }

      // بدء التشغيل
      await initWebRTC();
      initChat();
    });
  </script>
</body>
</html>