<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>جلسة مع <%= session.patient.name %></title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .video-container {
      position: relative;
      background-color: #000;
    }
    .video-placeholder {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background-color: rgba(0, 0, 0, 0.7);
      z-index: 10;
      transition: opacity 0.3s;
      color: white;
    }
    .video-placeholder.hidden {
      opacity: 0;
      pointer-events: none;
    }
    .remote-video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .local-video {
      position: absolute;
      bottom: 20px;
      right: 20px;
      width: 160px;
      height: 120px;
      border: 2px solid white;
      border-radius: 8px;
      z-index: 15;
    }
    .connection-status {
      position: absolute;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 14px;
      z-index: 20;
      display: flex;
      align-items: center;
    }
    .connection-status i {
      margin-left: 5px;
    }
    .spinner {
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    .chat-container {
      display: flex;
      flex-direction: column;
      height: 100%;
    }
    .messages-container {
      flex: 1;
      overflow-y: auto;
      padding: 16px;
    }
    .message {
      max-width: 80%;
      padding: 12px 16px;
      border-radius: 18px;
      margin-bottom: 12px;
      position: relative;
      word-break: break-word;
    }
    .message.sent {
      background-color: #007bff;
      color: white;
      margin-left: auto;
      border-bottom-right-radius: 4px;
    }
    .message.received {
      background-color: #e9ecef;
      color: #333;
      margin-right: auto;
      border-bottom-left-radius: 4px;
    }
    .message-time {
      font-size: 11px;
      opacity: 0.8;
      margin-top: 4px;
      display: block;
      text-align: left;
    }
    .message.sent .message-time {
      text-align: right;
    }
    .input-container {
      display: flex;
      padding: 12px;
      border-top: 1px solid #e0e0e0;
      background-color: white;
    }
    .message-input {
      flex: 1;
      padding: 10px 16px;
      border: 1px solid #ddd;
      border-radius: 24px;
      outline: none;
      font-size: 15px;
    }
    .send-button {
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 50%;
      width: 44px;
      height: 44px;
      margin-right: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
    .file-upload-button {
      background-color: #6c757d;
      color: white;
      border: none;
      border-radius: 50%;
      width: 44px;
      height: 44px;
      margin-left: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
    .file-input {
      display: none;
    }
    .file-message {
      max-width: 80%;
      padding: 12px;
      border-radius: 12px;
      margin-bottom: 12px;
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
    }
    .file-message.sent {
      margin-left: auto;
      background-color: #e3f2fd;
      border-color: #bbdefb;
    }
    .file-message.received {
      margin-right: auto;
    }
    .file-icon {
      font-size: 36px;
      color: #6c757d;
      text-align: center;
      margin-bottom: 8px;
    }
    .file-name {
      font-weight: 500;
      margin-bottom: 4px;
      word-break: break-all;
    }
    .file-size {
      font-size: 12px;
      color: #6c757d;
      margin-bottom: 8px;
    }
    .file-download {
      display: inline-block;
      padding: 6px 12px;
      background-color: #007bff;
      color: white;
      border-radius: 20px;
      text-decoration: none;
      font-size: 13px;
    }
    .file-preview {
      max-width: 100%;
      max-height: 200px;
      border-radius: 8px;
      margin-top: 8px;
    }
    .upload-progress {
      width: 100%;
      height: 4px;
      background-color: #e9ecef;
      border-radius: 2px;
      margin-top: 8px;
      overflow: hidden;
    }
    .progress-bar {
      height: 100%;
      background-color: #007bff;
      width: 0%;
      transition: width 0.3s;
    }
    .error-toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #dc3545;
      color: white;
      padding: 12px 24px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      display: flex;
      align-items: center;
      z-index: 1000;
      transform: translateY(100px);
      opacity: 0;
      transition: all 0.3s ease;
    }
    .error-toast.show {
      transform: translateY(0);
      opacity: 1;
    }
    .error-icon {
      margin-left: 8px;
    }
  </style>
</head>
<body class="bg-gray-100 font-sans">
  <div class="flex flex-col h-screen">
    <header class="bg-blue-600 text-white p-4 text-center">
      <h1 class="text-xl font-bold">جلسة مع <%= session.patient.name %></h1>
    </header>

    <div class="flex flex-1 overflow-hidden">
      <!-- قسم الفيديو -->
      <div class="flex-1 bg-black relative">
        <div id="remoteVideoPlaceholder" class="video-placeholder">
          <div class="text-center">
            <i class="fas fa-user-injured text-5xl mb-4"></i>
            <p class="text-xl mb-2">في انتظار اتصال المريض...</p>
            <div class="flex items-center justify-center">
              <div class="spinner mr-2"><i class="fas fa-circle-notch text-2xl"></i></div>
              <span>جاري الاتصال...</span>
            </div>
          </div>
        </div>
        <video id="remoteVideo" autoplay playsinline class="remote-video"></video>
        <video id="localVideo" autoplay muted playsinline class="local-video"></video>
        <div id="connectionStatus" class="connection-status hidden">
          <span>جاري الاتصال...</span>
          <i class="fas fa-circle-notch spinner"></i>
        </div>
      </div>

      <!-- قسم المحادثة -->
      <div class="w-96 border-r border-gray-200 bg-white flex flex-col">
        <div class="p-4 border-b border-gray-200 font-bold">المحادثة</div>
        <div id="messagesContainer" class="messages-container"></div>
        <div class="input-container">
          <button id="sendButton" class="send-button">
            <i class="fas fa-paper-plane"></i>
          </button>
          <input id="messageInput" type="text" class="message-input" placeholder="اكتب رسالتك...">
          <button id="fileUploadButton" class="file-upload-button">
            <i class="fas fa-paperclip"></i>
          </button>
          <input id="fileInput" type="file" class="file-input" multiple>
        </div>
      </div>
    </div>
  </div>

  <div id="errorToast" class="error-toast">
    <span id="errorMessage"></span>
    <i class="fas fa-exclamation-circle error-icon"></i>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      try {
        // العناصر الأساسية
        const socket = io();
        const sessionId = "<%= session._id %>";
        const userType = "doctor";
        
        // عناصر واجهة المستخدم
        const remoteVideo = document.getElementById('remoteVideo');
        const localVideo = document.getElementById('localVideo');
        const remoteVideoPlaceholder = document.getElementById('remoteVideoPlaceholder');
        const connectionStatus = document.getElementById('connectionStatus');
        const messagesContainer = document.getElementById('messagesContainer');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const fileUploadButton = document.getElementById('fileUploadButton');
        const fileInput = document.getElementById('fileInput');
        const errorToast = document.getElementById('errorToast');
        const errorMessage = document.getElementById('errorMessage');

        // متغيرات حالة الجلسة
        let peerConnection;
        let localStream;
        let connectionTimeout;

        // ======================
        // دوال مساعدة
        // ======================

        // عرض رسالة خطأ
        const showError = (message, duration = 5000) => {
          errorMessage.textContent = message;
          errorToast.classList.add('show');
          
          setTimeout(() => {
            errorToast.classList.remove('show');
          }, duration);
        };

        // تحديث حالة الاتصال
        const updateConnectionStatus = (status, isConnected = false, isError = false) => {
          if (!connectionStatus) return;
          
          let iconClass = 'fa-circle-notch spinner';
          let statusClass = '';
          
          if (isConnected) {
            iconClass = 'fa-check-circle';
            statusClass = 'text-success';
          } else if (isError) {
            iconClass = 'fa-times-circle';
            statusClass = 'text-danger';
          }
          
          connectionStatus.innerHTML = `
            <span>${status}</span>
            <i class="fas ${iconClass} ${statusClass}"></i>
          `;
          
          connectionStatus.classList.remove('hidden');
        };

        // إنشاء عنصر رسالة نصية
        const createTextMessage = (sender, text, time) => {
          const messageDiv = document.createElement('div');
          messageDiv.className = `message ${sender === userType ? 'sent' : 'received'}`;
          
          messageDiv.innerHTML = `
            <div class="message-text">${text}</div>
            <span class="message-time">${time}</span>
          `;
          
          return messageDiv;
        };

        // إنشاء عنصر رسالة ملف
        const createFileMessage = (sender, fileData) => {
          const fileDiv = document.createElement('div');
          fileDiv.className = `file-message ${sender === userType ? 'sent' : 'received'}`;
          
          // تحديد أيقونة الملف حسب النوع
          let fileIcon = 'fa-file';
          const fileType = fileData.fileType || '';
          
          if (fileType.startsWith('image/')) fileIcon = 'fa-file-image';
          else if (fileType.includes('pdf')) fileIcon = 'fa-file-pdf';
          else if (fileType.includes('word')) fileIcon = 'fa-file-word';
          else if (fileType.includes('excel')) fileIcon = 'fa-file-excel';
          else if (fileType.includes('video')) fileIcon = 'fa-file-video';
          else if (fileType.includes('audio')) fileIcon = 'fa-file-audio';
          else if (fileType.includes('zip')) fileIcon = 'fa-file-archive';
          
          fileDiv.innerHTML = `
            <div class="file-icon">
              <i class="fas ${fileIcon}"></i>
            </div>
            <div class="file-name">${fileData.fileName}</div>
            <div class="file-size">${formatFileSize(fileData.fileSize)}</div>
            <a href="${fileData.fileUrl}" target="_blank" class="file-download">
              <i class="fas fa-download"></i> تحميل
            </a>
          `;
          
          // إضافة معاينة إذا كان الملف صورة
          if (fileType.startsWith('image/')) {
            fileDiv.innerHTML += `
              <img src="${fileData.fileUrl}" class="file-preview" alt="معاينة الصورة">
            `;
          }
          
          // إضافة وقت الرسالة
          const timeDiv = document.createElement('div');
          timeDiv.className = 'message-time';
          timeDiv.textContent = fileData.time || '';
          fileDiv.appendChild(timeDiv);
          
          return fileDiv;
        };

        // تنسيق حجم الملف
        const formatFileSize = (bytes) => {
          if (bytes === 0) return '0 بايت';
          const k = 1024;
          const sizes = ['بايت', 'كيلوبايت', 'ميجابايت', 'جيجابايت'];
          const i = Math.floor(Math.log(bytes) / Math.log(k));
          return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        };

        // تنظيف الموارد
        const cleanupResources = () => {
          if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
          }
          if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
          }
          clearTimeout(connectionTimeout);
        };

        const uploadFile = (file) => {
  return new Promise((resolve, reject) => {
    const formData = new FormData();
    formData.append('sessionFile', file);
    formData.append('sessionId', sessionId);
    formData.append('senderType', userType);
    
    // إضافة CSRF token من الكوكيز
    const csrfToken = document.cookie.split('; ').find(row => row.startsWith('XSRF-TOKEN='))?.split('=')[1];
    if (csrfToken) {
      formData.append('_csrf', csrfToken);
    }

    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/api/sessions/upload-file', true);
            // إنشاء رسالة تحميل مؤقتة
            const tempMessage = {
              sender: userType,
              fileName: file.name,
              fileSize: file.size,
              fileType: file.type,
              fileUrl: '#',
              uploading: true
            };
            
            const tempElement = createFileMessage(tempMessage.sender, tempMessage);
            messagesContainer.appendChild(tempElement);
            scrollToBottom();
            
            // متابعة تقدم الرفع
            xhr.upload.onprogress = (event) => {
              if (event.lengthComputable) {
                const progress = Math.round((event.loaded / event.total) * 100);
                const progressBar = tempElement.querySelector('.progress-bar');
                if (progressBar) {
                  progressBar.style.width = `${progress}%`;
                }
              }
            };

            xhr.onload = () => {
              if (xhr.status === 200) {
                const response = JSON.parse(xhr.responseText);
                resolve(response);
                
                // استبدال الرسالة المؤقتة بالنهائية
                tempElement.remove();
                const finalMessage = {
                  sender: userType,
                  fileName: response.fileData.fileName,
                  fileSize: response.fileData.fileSize,
                  fileType: response.fileData.fileType,
                  fileUrl: response.fileData.fileUrl,
                  time: new Date().toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' })
                };
                messagesContainer.appendChild(createFileMessage(finalMessage.sender, finalMessage));
                scrollToBottom();
              } else {
                reject(new Error('فشل في رفع الملف'));
                tempElement.remove();
                showError('فشل في رفع الملف');
              }
            };

            xhr.onerror = () => {
              reject(new Error('حدث خطأ في الاتصال'));
              tempElement.remove();
              showError('حدث خطأ أثناء رفع الملف');
            };

            xhr.send(formData);
          });
        };

        // التمرير إلى آخر رسالة
        const scrollToBottom = () => {
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        };

        // تحميل سجل المحادثة
        const loadChatHistory = async () => {
          try {
            const response = await fetch(`/api/sessions/${sessionId}/messages`);
            if (response.ok) {
              const messages = await response.json();
              
              messages.forEach(msg => {
                if (msg.type === 'text') {
                  messagesContainer.appendChild(createTextMessage(
                    msg.sender,
                    msg.message,
                    new Date(msg.timestamp).toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' })
                  ));
                } else if (msg.type === 'file') {
                  messagesContainer.appendChild(createFileMessage(
                    msg.sender,
                    {
                      ...msg.fileData,
                      time: new Date(msg.timestamp).toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' })
                    }
                  ));
                }
              });
              
              scrollToBottom();
            }
          } catch (error) {
            console.error('Error loading chat history:', error);
          }
        };

        // ======================
        // إعداد اتصال WebRTC
        // ======================

        const initWebRTC = async () => {
          try {
            updateConnectionStatus('جاري إعداد الاتصال...');
            
            // الحصول على وسائط المستخدم
            localStream = await navigator.mediaDevices.getUserMedia({
              video: true,
              audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true
              }
            });
            
            localVideo.srcObject = localStream;
            
            // تكوين اتصال Peer
            const configuration = {
              iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' },
                { urls: 'stun:stun2.l.google.com:19302' }
              ]
            };
            
            peerConnection = new RTCPeerConnection(configuration);
            
            // إضافة مسارات الوسائط المحلية
            localStream.getTracks().forEach(track => {
              peerConnection.addTrack(track, localStream);
            });
            
            // معالجة المرشحات ICE
            peerConnection.onicecandidate = (event) => {
              if (event.candidate) {
                socket.emit('iceCandidate', { sessionId, candidate: event.candidate });
              }
            };
            
            // معالجة تيار الوسائط البعيدة
            peerConnection.ontrack = (event) => {
              remoteVideo.srcObject = event.streams[0];
              remoteVideoPlaceholder.classList.add('hidden');
              updateConnectionStatus('متصل', true);
              clearTimeout(connectionTimeout);
            };
            
            // مراقبة حالة الاتصال
            peerConnection.oniceconnectionstatechange = () => {
              const state = peerConnection.iceConnectionState;
              
              if (state === 'connected' || state === 'completed') {
                updateConnectionStatus('متصل', true);
              } else if (state === 'disconnected' || state === 'failed') {
                updateConnectionStatus('تم قطع الاتصال', false, true);
                showError('تم قطع الاتصال بالمريض');
                cleanupResources();
              }
            };
            
            // انتظار العرض من المريض
            socket.on('offer', async (offer) => {
              try {
                updateConnectionStatus('جاري قبول الاتصال...');
                await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
                
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                
                socket.emit('answer', { sessionId, answer });
                updateConnectionStatus('جاري إكمال الاتصال...');
              } catch (error) {
                console.error('Error handling offer:', error);
                showError('فشل في إعداد اتصال الفيديو');
                updateConnectionStatus('فشل في الاتصال', false, true);
                cleanupResources();
              }
            });
            
            // معالجة مرشحات ICE الواردة
            socket.on('iceCandidate', async (candidate) => {
              try {
                if (peerConnection && candidate) {
                  await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                }
              } catch (error) {
                console.error('Error adding ICE candidate:', error);
              }
            });
            
            // مهلة الاتصال
            connectionTimeout = setTimeout(() => {
              if (!peerConnection.remoteDescription) {
                showError('تعذر الاتصال بالمريض. يرجى المحاولة مرة أخرى.');
                updateConnectionStatus('فشل في الاتصال', false, true);
                cleanupResources();
              }
            }, 30000);
            
          } catch (error) {
            console.error('Error initializing WebRTC:', error);
            showError('فشل في بدء الجلسة: ' + error.message);
            updateConnectionStatus('فشل في الاتصال', false, true);
            cleanupResources();
          }
        };

        // ======================
        // إعداد اتصال Socket.io
        // ======================

        socket.emit('joinSession', { sessionId, userType });
        
        // استقبال الرسائل النصية
        socket.on('newMessage', (message) => {
          messagesContainer.appendChild(createTextMessage(
            message.sender,
            message.text,
            message.time
          ));
          scrollToBottom();
        });
        
        // استقبال رسائل الملفات
        socket.on('newFileMessage', (fileData) => {
          messagesContainer.appendChild(createFileMessage(fileData.sender, fileData));
          scrollToBottom();
        });

        // ======================
        // معالجة أحداث واجهة المستخدم
        // ======================

        // إرسال رسالة نصية
        sendButton.addEventListener('click', () => {
          const message = messageInput.value.trim();
          if (message) {
            const timestamp = new Date();
            socket.emit('sendMessage', {
              sessionId,
              message,
              timestamp
            });
            messageInput.value = '';
          }
        });
        
        messageInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            sendButton.click();
          }
        });
        
        // رفع ملف
        fileUploadButton.addEventListener('click', () => {
          fileInput.click();
        });
        
        fileInput.addEventListener('change', async (e) => {
          const files = e.target.files;
          if (files && files.length > 0) {
            for (let i = 0; i < files.length; i++) {
              try {
                await uploadFile(files[i]);
              } catch (error) {
                console.error('Error uploading file:', error);
                showError('حدث خطأ أثناء رفع الملف');
              }
            }
            fileInput.value = '';
          }
        });
        
        // تنظيف الموارد عند إغلاق الصفحة
        window.addEventListener('beforeunload', cleanupResources);
        
        // بدء الجلسة
        initWebRTC();
        loadChatHistory();

      } catch (error) {
        console.error('Initialization error:', error);
        showError('حدث خطأ غير متوقع أثناء تحميل الجلسة');
      }
    });
  </script>
</body>
</html>